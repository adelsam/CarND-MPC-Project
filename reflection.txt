The Model
I used an MPC controller very similar to what was used in the lessons/quiz.  The state is a 6-dimensional vector
consisting of [px, py, psi, v, cte, epsi].  There are two actuators: steering angle and acceleration (positive =
throttle/negative = brake).  The update equations were taken from the lessons:, I use the cos() component of the
velocity to update x, the sin() component of velocity to update y, steering angle (modified by the CoG constant)
to update psi, and acceleration to update velocity.


Timestamp Length & Elapsed Duration
I picked 1/10s as the timestamp length and 20 as the number of timestamps.  1/10s is a good small value to approximate
the continuous movement of the car.  Using 20 steps gives MPC 2 seconds of horizon which allows for realistic path
prediction while still having reasonable computational complexity.


Cost Function
I experimented with a variety of cost functions in the MPC engine, finding that it was more helpful to penalize epsi
than cte in order to get a smooth car path.  I also increased the constants for steering angle and changes in steering
angle to help smooth out the planned path.


Polynomial Fitting and MPC Preprocessing
All of the landmark points are converted into the car's coordinate system prior to fitting.  Since the car may
be turning during the actuator latency, I use the car's average psi during the latency to rotate the points from
map coordinates to car coordinates (but use the car's initial (x, y) position) to limit any additional noise from
that process.  Since I still want the MPC path for the car to account for the position of the car after the
actuator latency, I use the projected position of the car as the initial state passed into the MPC solver.


Deal with Latency
As discussed, I tried to project both the position of the car and the landmarks prior to running MPC, but I ran
into a lot of issues with noisy measurements, so instead, I deal with latency by predicting the position of the
car (based on the previous steering angle and velocity) and use that as the initial state passed into the MPC
solver.  I ignore the car's linear acceleration since it has a small impact on velocity over the short dt  of .1s.


